name: Deployment pipeline

on:
  push:
    branches: [main]

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
              - '.github/workflows/**'
            backend:
              - 'backend/**'
              - '.github/workflows/**'

  frontend:
    # Only activates if changes in /frontend or in /workflows
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install frontend dependencies & build
        run: |
          cd frontend
          npm ci
          npm run build -- --configuration production

      - name: Check dist folder
        run: ls -R dist/frontend

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy frontend to S3
        run: aws s3 sync dist/frontend/ s3://synerra-frontend --delete

      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DIST_ID }} --paths "/*"

  backend:
    # Only activates if changes in /backend or in /workflows
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
        # ci = clean install

      - name: Install Serverless Framework
        run: npm install -g serverless@4

      - name: Login to Serverless
        run: serverless login --token ${{ secrets.SERVERLESS_ACCESS_KEY }}

      - name: Deploy backend
        run: |
          cd backend
          npx serverless deploy
