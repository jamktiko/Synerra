# This file tells GitHub Actions what to do when pushing to repo.
name: Deployment pipeline

on:
  # Pipeline runs when code is being pushed to the main branch
  push:
    branches: [main]

# Jobs are the tasks that the pipeline runs.
# Each job starts it's own virtual machine that runs in GitHub's cloud.
jobs:
  # Job name
  changes:
    # Uses ubuntu on the vm
    runs-on: ubuntu-latest
    # Defines outputs that the main jobs can use
    outputs:
      # These variables are set true/false based on wether the frontend/backend folders have changes or not
      frontend: ${{ steps.filter.outputs.frontend }}
      backend: ${{ steps.filter.outputs.backend }}
    steps:
      # Clones the repo into the workflow runner so that all the jobs can access the code. VERY ESSENTIAL
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          # Checks for changes in the listed folders with paths-filter@v4.
          # The results are set to the above variables that then are passed for other jobs to use.
          filters: |
            frontend:
              - 'frontend/**'
              - '.github/workflows/**'
            backend:
              - 'backend/**'
              - '.github/workflows/**'

  # Job for building the frontend project and deploying it to the AWS s3
  frontend:
    # Only activates if changes detected in /frontend or in /workflows. (Gets the data from the job "changes")
    needs: changes
    if:
      needs.changes.outputs.frontend == 'true'
      # Runs Ubuntu on the vm
    runs-on: ubuntu-latest
    steps:
      # Clones the repo into the workflow runner so that all the jobs can access the code. VERY ESSENTIAL
      - name: Checkout repo
        uses: actions/checkout@v4

      # Sets up Node for the project in the vm
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Installs packages and dependencies for the project in the vm and builds the project
      - name: Install frontend dependencies & build
        # Runs normal cmd commands to first install packages and then build a production version from the Angular project
        # (npm ci, basically nmp i but with "clear install", that by installing the exact versions from package-lock.json
        # and ignoring version ranges form package.json, guarantees that all the versions are the same on every install.)
        run: |
          cd frontend
          npm ci
          npm run build -- --configuration production

      # Authenticates with AWS using the stored secrets from GitHub
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Deploys the frontend to AWS s3
      - name: Deploy frontend to S3
        run: |
          cd frontend
          aws s3 sync dist/frontend/ s3://synerra-frontend --delete

      # Clears the AWS CloudFront cache so that the new frontend updates in the website
      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DIST_ID }} --paths "/*"

  # Job for building the backend project and deploying it to s3
  backend:
    # Only activates if changes in /backend or in /workflows
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    # Gets the Serverless key
    env:
      SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
    steps:
      # Clones the repo into the workflow runner so that all the jobs can access the code. VERY ESSENTIAL
      - name: Checkout repo
        uses: actions/checkout@v4

      # Sets up Node for the project in the vm
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Installs the dependencies to the vm
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
        # ci = clean install

      # Installs Serverless to the vm (needed in serverless deploy etc.)
      - name: Install Serverless Framework
        run: npm install -g serverless@4

      # Authenticates with AWS using the stored secrets from GitHub
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Deploys the backend to AWS s3
      - name: Deploy backend
        run: |
          cd backend
          npx serverless deploy
