#org: omatunnus
service: chat-proto
frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-north-1
  environment:
    CONNECTION_DB_TABLE: ${self:service}-connectionTable
    CHAT_HISTORY_TABLE: ${self:service}-chatHistoryTable
    USER_TABLE: ${self:service}-userTable
    USER_POOL_ID: { Ref: UserPool } # cogniton user pool
    USER_CLIENT_ID: { Ref: UserClient } # cogniton client id
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'dynamodb:PutItem'
        - 'dynamodb:GetItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:Scan'
        - 'dynamodb:Query'
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource:
        - Fn::GetAtt: [ConnectionTable, Arn]
        - Fn::GetAtt: [ChatHistoryTable, Arn]
        - Fn::GetAtt: [UserTable, Arn]
        - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
    - Effect: 'Allow'
      Action:
        - 'execute-api:ManageConnections'
      Resource:
        - 'arn:aws:execute-api:*:*:**/@connections/*'
  httpApi:
    cors:
      allowedOrigins:
        - '*'
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - OPTIONS
        - GET
        - POST
        - PUT
        - DELETE
    authorizers:
      PrivateAuthorizer: # Cogniton authorizerin nimi
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
            - ''
            - - 'https://cognito-idp.'
              - '${opt:region, self:provider.region}'
              - '.amazonaws.com/'
              - Ref: UserPool
        audience:
          - Ref: UserClient

functions:
  loginUser: # sisäänkirjautuminen
    handler: user/login.handler
    events:
      - httpApi:
          path: /user/login
          method: post

  signupUser: # rekisteröityminen
    handler: user/signup.handler
    events:
      - httpApi:
          path: /user/signup
          method: post

  getUsers:
    handler: user/getUsers.handler
    events:
      - httpApi:
          path: /user
          method: get

  privateAPI: # suojattu funktio ja reitti
    handler: user/private.handler
    events:
      - httpApi:
          path: /user/private
          method: post
          authorizer: PrivateAuthorizer # suojaus
  connectHandler:
    handler: handlers.connectHandler
    events:
      - websocket:
          route: $connect
          authorizer:
            name: authHandler
            identitySource: 'route.request.querystring.Auth'

  disconnectHandler:
    handler: handlers.disconnectHandler
    events:
      - websocket:
          route: $disconnect

  defaultHandler:
    handler: handlers.defaultHandler
    events:
      - websocket:
          route: $default

  sendmessageHandler:
    handler: sendmessage.handler
    events:
      - websocket:
          route: sendmessage

  enterroomHandler:
    handler: enterroom.handler
    events:
      - websocket:
          route: enterroom

  exitroomHandler:
    handler: exitroom.handler
    events:
      - websocket:
          route: exitroom

  authHandler:
    handler: handlers.auth

resources:
  Resources:
    UserPool: # cognito userpool
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        Schema: # käyttäjän tietojen skeema cognitossa. Tässä pelkkä email
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy: # salasanan ominaisuudet
            MinimumLength: 6
        AutoVerifiedAttributes: ['email'] # email validoidaan

    UserClient: # cognito userpoolin client
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5 # token validi 5 tuntia
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - 'ADMIN_NO_SRP_AUTH' # tavallinen authorisaatio emaililla ja salasanalla
    ConnectionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-connectionTable
        AttributeDefinitions:
          - AttributeName: roomId
            AttributeType: S
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: roomId
            KeyType: HASH
          - AttributeName: connectionId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

    ChatHistoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-chatHistoryTable
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: false

    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-userTable
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: false
