org: jamk1
app: synerra-backend

service: synerra-backend
frameworkVersion: '4'

provider:
  name: aws
  runtime: nodejs20.x
  region: eu-north-1
  environment:
    CONNECTION_DB_TABLE: ${self:service}-connectionTable
    MAIN_TABLE: ${self:service}-mainTable
    USER_POOL_ID: { Ref: UserPool } # cogniton user pool
    USER_CLIENT_ID: { Ref: UserClient } # cogniton client id
    PFP_BUCKET: synerra-pfp
    SECRET_NAME: arn:aws:secretsmanager:eu-north-1:810251959934:secret:GameApiSecrets-lyqEj3
    OFFLINE_MESSAGE_TOPIC:
      Fn::GetAtt:
        - OfflineMessageTopic
        - TopicArn

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'dynamodb:PutItem'
        - 'dynamodb:GetItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:Scan'
        - 'dynamodb:Query'
        - 'dynamodb:UpdateItem'
        - 'dynamodb:BatchGetItem'
        - 'dynamodb:TransactWriteItems'
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
        - 'cognito-idp:AdminDeleteUser'
        - s3:PutObject
        - s3:GetObject
        - 'sns:Publish'
      Resource:
        - Fn::GetAtt: [OfflineMessageTopic, TopicArn]
        - Fn::GetAtt: [ConnectionTable, Arn]
        - Fn::GetAtt: [MainTable, Arn]
        - Fn::Join:
            - ''
            - - Fn::GetAtt: [MainTable, Arn]
              - '/index/UsernameIndex' # GSI
        - Fn::Join:
            - ''
            - - Fn::GetAtt: [MainTable, Arn]
              - '/index/UsernameLowerIndex'
        - Fn::Join:
            - ''
            - - Fn::GetAtt: [MainTable, Arn]
              - '/index/OnlineStatusIndex'
        - Fn::Join:
            - ''
            - - Fn::GetAtt: [MainTable, Arn]
              - '/index/LanguageIndex'
        - Fn::Join:
            - ''
            - - Fn::GetAtt: [MainTable, Arn]
              - '/index/GamesIndex'
        - Fn::Join:
            - ''
            - - Fn::GetAtt: [MainTable, Arn]
              - '/index/GameNameLowerIndex'
        - Fn::Join:
            - ''
            - - Fn::GetAtt: [MainTable, Arn]
              - '/index/UserRooms'
        - Fn::Join:
            - ''
            - - Fn::GetAtt: [MainTable, Arn]
              - '/index/MessagesBySender'
        - Fn::Join:
            - ''
            - - Fn::GetAtt: [MainTable, Arn]
              - '/index/RoomMembersIndex'
        - Fn::Join:
            - ''
            - - Fn::GetAtt: [MainTable, Arn]
              - '/index/UnreadMessagesIndex'
        - Fn::Join:
            - ''
            - - Fn::GetAtt: [ConnectionTable, Arn]
              - '/index/ConnectionIdIndex'
        - Fn::Join:
            - ''
            - - Fn::GetAtt: [ConnectionTable, Arn]
              - '/index/UserIdIndex'
        - !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPool}
        - arn:aws:s3:::synerra-pfp/profile-pictures/*
    - Effect: 'Allow'
      Action:
        - 'execute-api:ManageConnections'
      Resource:
        - 'arn:aws:execute-api:*:*:**/@connections/*'
    - Effect: 'Allow'
      Action:
        - 'secretsmanager:GetSecretValue'
      Resource:
        - 'arn:aws:secretsmanager:eu-north-1:810251959934:secret:GameApiSecrets-*'
    - Effect: 'Allow'
      Action:
        - 'apigateway:GET'
        - 'apigateway:GET/*'
      Resource: '*'
  httpApi:
    cors:
      allowedOrigins:
        - '*'
      allowedHeaders:
        - Content-Type
        - Authorization
      allowedMethods:
        - OPTIONS
        - GET
        - POST
        - PUT
        - DELETE
    authorizers:
      PrivateAuthorizer: # Cogniton authorizerin nimi
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Join:
            - ''
            - - 'https://cognito-idp.'
              - '${opt:region, self:provider.region}'
              - '.amazonaws.com/'
              - Ref: UserPool
        audience:
          - Ref: UserClient

functions:
  loginUser: # sisäänkirjautuminen
    handler: src/user/login.handler
    events:
      - httpApi:
          path: /user/login
          method: post

  signupUser: # rekisteröityminen
    handler: src/user/signup.handler
    events:
      - httpApi:
          path: /user/signup
          method: post
  getUsers:
    handler: src/user/getUsers.handler
    events:
      - httpApi:
          path: /user
          method: get

  getMe:
    handler: src/user/me.handler
    events:
      - httpApi:
          path: /me
          method: get
          authorizer: PrivateAuthorizer

  getUserById:
    handler: src/user/getUserById.handler
    events:
      - httpApi:
          path: /user/{userId}
          method: get

  getUserByName:
    handler: src/user/getUserByName.handler
    events:
      - httpApi:
          path: /user/username/{username}
          method: get
          authorizer: PrivateAuthorizer

  updateUsers:
    handler: src/user/updateUserById.handler
    events:
      - httpApi:
          path: /user/update/{userId}
          method: put
          authorizer: PrivateAuthorizer
  filterUsers:
    handler: src/user/filterUsers.handler
    events:
      - httpApi:
          path: /user/filter
          method: post
  deleteUser:
    handler: src/user/deleteUser.handler
    events:
      - httpApi:
          path: /user/delete/{userId}
          method: delete
          authorizer: PrivateAuthorizer
  addGame:
    handler: src/games/addGame.handler
    events:
      - httpApi:
          path: /games/add
          method: post
          authorizer: PrivateAuthorizer
  listGames:
    handler: src/games/listGames.handler
    events:
      - httpApi:
          path: /games
          method: get
  gameByName:
    handler: src/games/gameByName.handler
    events:
      - httpApi:
          path: /games/{gamename}
          method: get
          authorizer: PrivateAuthorizer
  deleteGame:
    handler: src/games/deleteGame.handler
    events:
      - httpApi:
          path: /games/delete/{gameId}
          method: delete
          authorizer: PrivateAuthorizer
  filterGames:
    handler: src/games/filterGames.handler
    events:
      - httpApi:
          path: /games/filter
          method: get
  userGame:
    handler: src/relations/userGame.handler
    events:
      - httpApi:
          path: /relations/usergame
          method: post
          authorizer: PrivateAuthorizer
  deleteUserGame:
    handler: src/relations/deleteUserGame.handler
    events:
      - httpApi:
          path: /relations/deletegame/{gameId}
          method: delete
          authorizer: PrivateAuthorizer
  friendRequest:
    handler: src/relations/friendRequest.handler
    events:
      - httpApi:
          path: /friends/friendrequest
          method: post
          authorizer: PrivateAuthorizer
  deleteFriend:
    handler: src/relations/deleteFriend.handler
    events:
      - httpApi:
          path: /friends/deletefriend
          method: delete
          authorizer: PrivateAuthorizer
  getFriends:
    handler: src/relations/getFriends.handler
    events:
      - httpApi:
          path: /friends/get
          method: get
          authorizer: PrivateAuthorizer
  getMessages:
    handler: src/getMessages.handler
    events:
      - httpApi:
          path: /messages/{roomId}
          method: get
          authorizer: PrivateAuthorizer
  getRequests:
    handler: src/relations/getRequests.handler
    events:
      - httpApi:
          path: /friends/requests
          method: get
          authorizer: PrivateAuthorizer
  getUnreadMsg:
    handler: src/user/unreadMessages.handler
    events:
      - httpApi:
          path: /messages/unread
          method: get
          authorizer: PrivateAuthorizer
  deleteUnreads:
    handler: src/user/deleteUnreads.handler
    events:
      - httpApi:
          path: /rooms/{roomId}/unreads
          method: delete
          authorizer: PrivateAuthorizer
  uploadProfilePicture:
    handler: src/profile-picture/upload.handler
    events:
      - httpApi:
          path: /users/profile-picture/upload
          method: post
          authorizer: PrivateAuthorizer
  giveReputation:
    handler: src/relations/giveRep.handler
    events:
      - httpApi:
          path: /relations/reputation
          method: post
          authorizer: PrivateAuthorizer

  privateAPI: # suojattu funktio ja reitti
    handler: src/user/private.handler
    events:
      - httpApi:
          path: /user/private
          method: post
          authorizer: PrivateAuthorizer # suojaus

  connectHandler:
    handler: src/handlers.connectHandler
    events:
      - websocket:
          route: $connect
          authorizer:
            name: authHandler
            identitySource: 'route.request.querystring.Auth'

  disconnectHandler:
    handler: src/handlers.disconnectHandler
    events:
      - websocket:
          route: $disconnect

  defaultHandler:
    handler: src/handlers.defaultHandler
    events:
      - websocket:
          route: $default

  sendmessageHandler:
    handler: src/sendmessage.handler
    events:
      - websocket:
          route: sendmessage

  enterroomHandler:
    handler: src/enterroom.handler
    events:
      - websocket:
          route: enterroom

  exitroomHandler:
    handler: src/exitroom.handler
    events:
      - websocket:
          route: exitroom

  authHandler:
    handler: src/handlers.auth

  sendNotification:
    handler: src/notifications/notifSend.handler
    events:
      - websocket:
          route: sendnotification

resources:
  Resources:
    OfflineMessageTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: offline-message-topic
    UserPool: # cognito userpool
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: serverless-auth-pool
        Schema: # käyttäjän tietojen skeema cognitossa. Tässä pelkkä email
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy: # salasanan ominaisuudet
            MinimumLength: 6
        AutoVerifiedAttributes: ['email'] # email validoidaan

    UserClient: # cognito userpoolin client
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5 # token validi 5 tuntia
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - 'ADMIN_NO_SRP_AUTH' # tavallinen authorisaatio emaililla ja salasanalla
    ConnectionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-connectionTable
        AttributeDefinitions:
          - AttributeName: roomId
            AttributeType: S
          - AttributeName: connectionId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: roomId
            KeyType: HASH
          - AttributeName: connectionId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ConnectionIdIndex
            KeySchema:
              - AttributeName: connectionId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: connectionId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    MainTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-mainTable
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
          - AttributeName: GSI2PK
            AttributeType: S
          - AttributeName: GSI2SK
            AttributeType: S
          - AttributeName: GSI3PK
            AttributeType: S
          - AttributeName: Username
            AttributeType: S
          - AttributeName: GSI4PK
            AttributeType: S
          - AttributeName: Name
            AttributeType: S
          - AttributeName: UserId # GSI partition key
            AttributeType: S
          - AttributeName: RoomId # GSI sort key (optional)
            AttributeType: S
          - AttributeName: SenderId # GSI partition key
            AttributeType: S
          - AttributeName: Timestamp # GSI sort key
            AttributeType: N
          - AttributeName: Username_Lower
            AttributeType: S
          - AttributeName: Name_lower
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: OnlineStatusIndex
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: LanguageIndex
            KeySchema:
              - AttributeName: GSI2PK
                KeyType: HASH
              - AttributeName: GSI2SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: UsernameIndex
            KeySchema:
              - AttributeName: GSI3PK
                KeyType: HASH
              - AttributeName: Username
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: GamesIndex
            KeySchema:
              - AttributeName: GSI4PK
                KeyType: HASH
              - AttributeName: Name
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: UserRooms
            KeySchema:
              - AttributeName: UserId
                KeyType: HASH
              - AttributeName: RoomId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: MessagesBySender
            KeySchema:
              - AttributeName: SenderId
                KeyType: HASH
              - AttributeName: Timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: UsernameLowerIndex
            KeySchema:
              - AttributeName: GSI3PK
                KeyType: HASH
              - AttributeName: Username_Lower
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: GameNameLowerIndex
            KeySchema:
              - AttributeName: GSI4PK
                KeyType: HASH
              - AttributeName: Name_lower
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: UnreadMessagesIndex
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: RoomMembersIndex
            KeySchema:
              - AttributeName: RoomId
                KeyType: HASH
              - AttributeName: UserId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
  Outputs:
    OfflineMessageTopicArn:
      Description: 'ARN of the OfflineMessageTopic'
      Value:
        Ref: OfflineMessageTopic
      Export:
        Name: OfflineMessageTopicArn
plugins:
  - serverless-prune-plugin

custom:
  prune:
    automatic: true # cleans up automatically after deploy
    number: 3
